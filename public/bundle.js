/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/pointer-tracker/dist/PointerTracker.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/pointer-tracker/dist/PointerTracker.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Pointer {\r\n    constructor(nativePointer) {\r\n        /** Unique ID for this pointer */\r\n        this.id = -1;\r\n        this.nativePointer = nativePointer;\r\n        this.pageX = nativePointer.pageX;\r\n        this.pageY = nativePointer.pageY;\r\n        this.clientX = nativePointer.clientX;\r\n        this.clientY = nativePointer.clientY;\r\n        if (self.Touch && nativePointer instanceof Touch) {\r\n            this.id = nativePointer.identifier;\r\n        }\r\n        else if (isPointerEvent(nativePointer)) {\r\n            // is PointerEvent\r\n            this.id = nativePointer.pointerId;\r\n        }\r\n    }\r\n    /**\r\n     * Returns an expanded set of Pointers for high-resolution inputs.\r\n     */\r\n    getCoalesced() {\r\n        if ('getCoalescedEvents' in this.nativePointer) {\r\n            return this.nativePointer.getCoalescedEvents().map((p) => new Pointer(p));\r\n        }\r\n        return [this];\r\n    }\r\n}\r\nconst isPointerEvent = (event) => self.PointerEvent && event instanceof PointerEvent;\r\nconst noop = () => { };\r\n/**\r\n * Track pointers across a particular element\r\n */\r\nclass PointerTracker {\r\n    /**\r\n     * Track pointers across a particular element\r\n     *\r\n     * @param element Element to monitor.\r\n     * @param options\r\n     */\r\n    constructor(_element, { start = () => true, move = noop, end = noop, rawUpdates = false, } = {}) {\r\n        this._element = _element;\r\n        /**\r\n         * State of the tracked pointers when they were pressed/touched.\r\n         */\r\n        this.startPointers = [];\r\n        /**\r\n         * Latest state of the tracked pointers. Contains the same number of pointers, and in the same\r\n         * order as this.startPointers.\r\n         */\r\n        this.currentPointers = [];\r\n        /**\r\n         * Listener for mouse/pointer starts.\r\n         *\r\n         * @param event This will only be a MouseEvent if the browser doesn't support pointer events.\r\n         */\r\n        this._pointerStart = (event) => {\r\n            if (event.button !== 0 /* Left */)\r\n                return;\r\n            if (!this._triggerPointerStart(new Pointer(event), event))\r\n                return;\r\n            // Add listeners for additional events.\r\n            // The listeners may already exist, but no harm in adding them again.\r\n            if (isPointerEvent(event)) {\r\n                const capturingElement = event.target && 'setPointerCapture' in event.target\r\n                    ? event.target\r\n                    : this._element;\r\n                capturingElement.setPointerCapture(event.pointerId);\r\n                this._element.addEventListener(this._rawUpdates ? 'pointerrawupdate' : 'pointermove', this._move);\r\n                this._element.addEventListener('pointerup', this._pointerEnd);\r\n                this._element.addEventListener('pointercancel', this._pointerEnd);\r\n            }\r\n            else {\r\n                // MouseEvent\r\n                window.addEventListener('mousemove', this._move);\r\n                window.addEventListener('mouseup', this._pointerEnd);\r\n            }\r\n        };\r\n        /**\r\n         * Listener for touchstart.\r\n         * Only used if the browser doesn't support pointer events.\r\n         */\r\n        this._touchStart = (event) => {\r\n            for (const touch of Array.from(event.changedTouches)) {\r\n                this._triggerPointerStart(new Pointer(touch), event);\r\n            }\r\n        };\r\n        /**\r\n         * Listener for pointer/mouse/touch move events.\r\n         */\r\n        this._move = (event) => {\r\n            const previousPointers = this.currentPointers.slice();\r\n            const changedPointers = 'changedTouches' in event // Shortcut for 'is touch event'.\r\n                ? Array.from(event.changedTouches).map((t) => new Pointer(t))\r\n                : [new Pointer(event)];\r\n            const trackedChangedPointers = [];\r\n            for (const pointer of changedPointers) {\r\n                const index = this.currentPointers.findIndex((p) => p.id === pointer.id);\r\n                if (index === -1)\r\n                    continue; // Not a pointer we're tracking\r\n                trackedChangedPointers.push(pointer);\r\n                this.currentPointers[index] = pointer;\r\n            }\r\n            if (trackedChangedPointers.length === 0)\r\n                return;\r\n            this._moveCallback(previousPointers, trackedChangedPointers, event);\r\n        };\r\n        /**\r\n         * Call the end callback for this pointer.\r\n         *\r\n         * @param pointer Pointer\r\n         * @param event Related event\r\n         */\r\n        this._triggerPointerEnd = (pointer, event) => {\r\n            const index = this.currentPointers.findIndex((p) => p.id === pointer.id);\r\n            // Not a pointer we're interested in?\r\n            if (index === -1)\r\n                return false;\r\n            this.currentPointers.splice(index, 1);\r\n            this.startPointers.splice(index, 1);\r\n            const cancelled = event.type === 'touchcancel' || event.type === 'pointercancel';\r\n            this._endCallback(pointer, event, cancelled);\r\n            return true;\r\n        };\r\n        /**\r\n         * Listener for mouse/pointer ends.\r\n         *\r\n         * @param event This will only be a MouseEvent if the browser doesn't support pointer events.\r\n         */\r\n        this._pointerEnd = (event) => {\r\n            if (!this._triggerPointerEnd(new Pointer(event), event))\r\n                return;\r\n            if (isPointerEvent(event)) {\r\n                if (this.currentPointers.length)\r\n                    return;\r\n                this._element.removeEventListener(this._rawUpdates ? 'pointerrawupdate' : 'pointermove', this._move);\r\n                this._element.removeEventListener('pointerup', this._pointerEnd);\r\n                this._element.removeEventListener('pointercancel', this._pointerEnd);\r\n            }\r\n            else {\r\n                // MouseEvent\r\n                window.removeEventListener('mousemove', this._move);\r\n                window.removeEventListener('mouseup', this._pointerEnd);\r\n            }\r\n        };\r\n        /**\r\n         * Listener for touchend.\r\n         * Only used if the browser doesn't support pointer events.\r\n         */\r\n        this._touchEnd = (event) => {\r\n            for (const touch of Array.from(event.changedTouches)) {\r\n                this._triggerPointerEnd(new Pointer(touch), event);\r\n            }\r\n        };\r\n        this._startCallback = start;\r\n        this._moveCallback = move;\r\n        this._endCallback = end;\r\n        this._rawUpdates = rawUpdates && 'onpointerrawupdate' in window;\r\n        // Add listeners\r\n        if (self.PointerEvent) {\r\n            this._element.addEventListener('pointerdown', this._pointerStart);\r\n        }\r\n        else {\r\n            this._element.addEventListener('mousedown', this._pointerStart);\r\n            this._element.addEventListener('touchstart', this._touchStart);\r\n            this._element.addEventListener('touchmove', this._move);\r\n            this._element.addEventListener('touchend', this._touchEnd);\r\n            this._element.addEventListener('touchcancel', this._touchEnd);\r\n        }\r\n    }\r\n    /**\r\n     * Remove all listeners.\r\n     */\r\n    stop() {\r\n        this._element.removeEventListener('pointerdown', this._pointerStart);\r\n        this._element.removeEventListener('mousedown', this._pointerStart);\r\n        this._element.removeEventListener('touchstart', this._touchStart);\r\n        this._element.removeEventListener('touchmove', this._move);\r\n        this._element.removeEventListener('touchend', this._touchEnd);\r\n        this._element.removeEventListener('touchcancel', this._touchEnd);\r\n        this._element.removeEventListener(this._rawUpdates ? 'pointerrawupdate' : 'pointermove', this._move);\r\n        this._element.removeEventListener('pointerup', this._pointerEnd);\r\n        this._element.removeEventListener('pointercancel', this._pointerEnd);\r\n        window.removeEventListener('mousemove', this._move);\r\n        window.removeEventListener('mouseup', this._pointerEnd);\r\n    }\r\n    /**\r\n     * Call the start callback for this pointer, and track it if the user wants.\r\n     *\r\n     * @param pointer Pointer\r\n     * @param event Related event\r\n     * @returns Whether the pointer is being tracked.\r\n     */\r\n    _triggerPointerStart(pointer, event) {\r\n        if (!this._startCallback(pointer, event))\r\n            return false;\r\n        this.currentPointers.push(pointer);\r\n        this.startPointers.push(pointer);\r\n        return true;\r\n    }\r\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PointerTracker);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pointer-tracker/dist/PointerTracker.mjs\n");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var pointer_tracker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pointer-tracker */ \"./node_modules/pointer-tracker/dist/PointerTracker.mjs\");\nvar _a;\n\n// ------------------- Initialise values \n// create variables for accessing HTML elements\nconst dragObject = document.getElementById('drag-object');\nconst dragBoundary = document.getElementById('boundary');\n// size of the draggable object on page load\nlet startWidth = dragObject.offsetWidth;\nlet startHeight = dragObject.offsetHeight;\n// limits for scaling\nconst minHeight = startHeight / 4;\nconst minWidth = startWidth / 4;\nconst maxHeight = startHeight * 4;\nconst maxWidth = startWidth * 4;\n// create global variables\n// offsets of mouse from the top and left sides of teh draggabe object\nvar mouseOffsetX;\nvar mouseOffsetY;\n// distance between two pointers when second is first pressed\nvar startPointerDistance;\n// ------------------- Event handler functions\n// centre draggable div on button press\nfunction handleCentre() {\n    dragObject.style.setProperty(\"transition\", 'left 1s, top 1s');\n    dragObject.style.setProperty('top', `${window.innerHeight / 2 - dragObject.offsetHeight / 2}px`);\n    dragObject.style.setProperty('left', `${window.innerWidth / 2 - dragObject.offsetWidth / 2}px`);\n}\n// activate handleCentre function when centre button is pressed\n(_a = document.getElementById('centre-button')) === null || _a === void 0 ? void 0 : _a.addEventListener('click', handleCentre);\nfunction handleReposition(e) {\n    // stop transisition animations that may have been activated after pressing centre button\n    dragObject.style.setProperty(\"transition\", 'null');\n    // set position of draggable div based on mouse position, and correct for starting mouse offset\n    dragObject.style.setProperty('top', `${e.clientY - mouseOffsetY}px`);\n    dragObject.style.setProperty('left', `${e.clientX - mouseOffsetX}px`);\n}\nfunction handleDragEnd() {\n    // get location of each side of the draggable div, relative to the top and left sides of the window\n    const rect = dragObject.getBoundingClientRect();\n    // out of bounds on left side\n    if (rect.left < 20) {\n        console.log('out of bounds');\n        dragObject === null || dragObject === void 0 ? void 0 : dragObject.style.setProperty('left', '20px');\n    }\n    // out of bounds on top side\n    if (rect.top < 20) {\n        console.log('out of bounds');\n        dragObject === null || dragObject === void 0 ? void 0 : dragObject.style.setProperty('top', '20px');\n    }\n    // out of bounds on right side\n    if (rect.right > window.innerWidth - 20) {\n        console.log('out of bounds');\n        dragObject.style.setProperty('left', `${window.innerWidth - dragObject.offsetWidth - 20}px`);\n    }\n    // out of bounds on bottom side\n    if (rect.bottom > window.innerHeight - 20) {\n        console.log('out of bounds');\n        dragObject.style.setProperty('top', `${window.innerHeight - dragObject.offsetHeight - 20}px`);\n    }\n}\nfunction handleResize(scaleFactor) {\n    // prevent scaling past the drag boundary region\n    let newHeight = Math.min(scaleFactor * startHeight, window.innerHeight - 40);\n    let newWidth = Math.min(scaleFactor * startWidth, window.innerWidth - 40);\n    // when scaling is restricted by the window size, keep the shape square\n    if (window.innerHeight > window.innerWidth) {\n        newHeight = newWidth;\n    }\n    else {\n        newWidth = newHeight;\n    }\n    // prevent scaling past 400% and below 25%\n    if (newHeight < minHeight) {\n        newHeight = minHeight;\n    }\n    if (newHeight > maxHeight) {\n        newHeight = maxHeight;\n    }\n    if (newWidth < minWidth) {\n        newWidth = minWidth;\n    }\n    if (newWidth > maxWidth) {\n        newWidth = maxWidth;\n    }\n    // set CSS properties of the draggable div\n    dragObject.style.setProperty('height', `${newHeight}px`);\n    dragObject.style.setProperty('width', `${newWidth}px`);\n}\n// ------------------- keep element within bounds on window resize\nwindow.addEventListener('resize', () => {\n    // get location of each side of the draggable div, relative to the top and left sides of the window\n    let rect = dragObject.getBoundingClientRect();\n    // only need to check for right and bottom sides, because div is positioned relative to the top and left sides of the window\n    if (rect.right > window.innerWidth) {\n        dragObject === null || dragObject === void 0 ? void 0 : dragObject.style.setProperty('left', `${window.innerWidth - dragObject.offsetWidth - 20}px`);\n    }\n    if (rect.bottom > window.innerHeight) {\n        dragObject === null || dragObject === void 0 ? void 0 : dragObject.style.setProperty('top', `${window.innerHeight - dragObject.offsetHeight - 20}px`);\n    }\n});\nfunction getDistance(a, b) {\n    return Math.sqrt(Math.pow((b.clientX - a.clientX), 2) + Math.pow((b.clientY - a.clientY), 2));\n}\n// ------------------- pointer tracking\n// track pointers on the draggable div\nconst objectTracker = new pointer_tracker__WEBPACK_IMPORTED_MODULE_0__.default(dragObject, {\n    start(_, event) {\n        // only track 1 pointer\n        if (objectTracker.currentPointers.length === 1)\n            return false;\n        // set starting offsets from draggable div top and left edges\n        mouseOffsetX = event.offsetX;\n        mouseOffsetY = event.offsetY;\n        return true;\n    },\n    move(_, __, event) {\n        // reposition div based on the current location of the pointer\n        handleReposition(event);\n    },\n    end() {\n        // check that the div is being dropped in the allowable region\n        handleDragEnd();\n    }\n});\n// track pointers anywhere in the draggable region\nconst screenTracker = new pointer_tracker__WEBPACK_IMPORTED_MODULE_0__.default(dragBoundary, {\n    start(pointer) {\n        // on start, the latest pointer is not yet in the currentPointers array\n        // the currentPointers array length is therefore 1 when the second pointer is introduced\n        if (screenTracker.currentPointers.length === 1) {\n            // get intial distance between the 2 pointers\n            startPointerDistance = getDistance(pointer, screenTracker.currentPointers[0]);\n            // get the size of the draggable div at the start of resizing occuring\n            startHeight = dragObject.offsetHeight;\n            startWidth = dragObject.offsetWidth;\n        }\n        return true;\n    },\n    move() {\n        // once the pointers are moving, both point trackers are in the currentPointers array\n        if (screenTracker.currentPointers.length === 2) {\n            // get current distance between the two touched points\n            const newPointerDistance = getDistance(screenTracker.currentPointers[0], screenTracker.currentPointers[1]);\n            // calculate the scale factor based on the percentage change of the distance between tounched points\n            const scaleFactor = newPointerDistance / startPointerDistance;\n            // resize the elemtn with the calculated scale factor\n            handleResize(scaleFactor);\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;